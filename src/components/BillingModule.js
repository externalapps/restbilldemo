import React, { useState, useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import { menuData } from '../data/menuData';
import { 
  Plus, 
  Minus, 
  Trash2, 
  Receipt, 
  Printer,
  X,
  ShoppingCart,
  Download,
  FileText,
  Table,
  Edit3,
  Settings,
  Menu as MenuIcon
} from 'lucide-react';

const BillingModule = () => {
  const { state, actions } = useAppContext();
  const [showReceipt, setShowReceipt] = useState(false);
  const [isPrinting, setIsPrinting] = useState(false);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [selectedTable, setSelectedTable] = useState(1);
  const [activeTab, setActiveTab] = useState('billing'); // 'billing' or 'menu'
  
  // Menu management state
  const [showAddItem, setShowAddItem] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [gstRate, setGstRate] = useState(5); // Default 5%
  
  // Local menu state for immediate updates
  const [localMenuData, setLocalMenuData] = useState(menuData);
  
  // New item form state
  const [newItem, setNewItem] = useState({
    name: '',
    price: '',
    category: 'breakfast'
  });

  // Success message state
  const [successMessage, setSuccessMessage] = useState('');

  // Initialize local menu data
  useEffect(() => {
    setLocalMenuData(menuData);
  }, []);

  // Generate table numbers 1-20 for selection
  const tableNumbers = Array.from({ length: 20 }, (_, i) => i + 1);

  // Categories for menu items
  const categories = [
    { value: 'breakfast', label: 'Breakfast / Tiffin' },
    { value: 'lunchVeg', label: 'Lunch / Meals (Veg)' },
    { value: 'lunchNonVeg', label: 'Lunch / Dinner (Non-Veg)' },
    { value: 'snacks', label: 'Snacks' },
    { value: 'beverages', label: 'Beverages' }
  ];

  const addToCart = (item) => {
    actions.addToCart(item);
  };

  const removeFromCart = (itemId) => {
    actions.removeFromCart(itemId);
  };

  const updateQuantity = (itemId, newQuantity) => {
    if (newQuantity <= 0) {
      actions.removeFromCart(itemId);
    } else {
      actions.updateCartQuantity(itemId, newQuantity);
    }
  };

  const generateBill = () => {
    if (state.cart.length === 0) {
      alert('Please add items to cart before generating bill');
      return;
    }
    if (!selectedTable) {
      alert('Please select a table number before generating bill');
      return;
    }
    setShowReceipt(true);
  };

  const printReceipt = () => {
    setIsPrinting(true);
    // Simulate printing to thermal printer
    setTimeout(() => {
      setIsPrinting(false);
      // Pass the selected table number when generating bill
      actions.generateBill(selectedTable);
      setShowReceipt(false);
      alert(`Bill generated successfully for Table ${selectedTable}! Order sent to kitchen.`);
    }, 3000);
  };

  const generatePDF = () => {
    setIsGeneratingPDF(true);
    
    // Simulate PDF generation
    setTimeout(() => {
      setIsGeneratingPDF(false);
      
      // Create a simple PDF-like download (in real app, use jsPDF or similar)
      const billContent = generateBillContent();
      downloadBillAsPDF(billContent);
      
      alert('PDF bill generated and downloaded successfully!');
    }, 2000);
  };

  const generateBillContent = () => {
    const subtotal = calculateSubtotal();
    const gst = calculateGST();
    const total = calculateTotal();
    const now = new Date();
    
    return `
RESTAURANT POS SYSTEM
Professional Point of Sale Solution
=====================================

Bill Details:
Date: ${now.toLocaleDateString()}
Time: ${now.toLocaleTimeString()}
Table: ${selectedTable}
Order #: ${state.orderCounter}

Items Ordered:
${state.cart.map(item => 
  `${item.name} × ${item.quantity} = ₹${item.price * item.quantity}`
).join('\n')}

=====================================
Subtotal: ₹${subtotal}
GST (${gstRate}%): ₹${gst.toFixed(2)}
=====================================
TOTAL: ₹${total.toFixed(2)}
=====================================

Thank you for dining with us!
Please visit again.

Generated by Restaurant POS System
Professional POS Solution
    `;
  };

  const downloadBillAsPDF = (content) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Bill_Table${selectedTable}_${new Date().toISOString().slice(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  };

  const calculateSubtotal = () => {
    return state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const calculateGST = () => {
    return calculateSubtotal() * (gstRate / 100);
  };

  const calculateTotal = () => {
    return calculateSubtotal() + calculateGST();
  };

  // Menu management functions
  const handleAddItem = () => {
    if (!newItem.name || !newItem.price || !newItem.category) {
      alert('Please fill in all fields');
      return;
    }
    
    // Create new item with unique ID
    const newItemWithId = {
      id: `new_${Date.now()}`,
      name: newItem.name,
      price: Number(newItem.price),
      category: newItem.category
    };
    
    // Add to local menu data immediately
    setLocalMenuData(prev => ({
      ...prev,
      [newItem.category]: [...(prev[newItem.category] || []), newItemWithId]
    }));
    
    // Show temporary success message
    setSuccessMessage(`"${newItem.name}" added to menu`);
    setTimeout(() => setSuccessMessage(''), 3000);
    
    // Reset form
    setNewItem({ name: '', price: '', category: 'breakfast' });
    setShowAddItem(false);
  };

  const handleEditItem = (item) => {
    setEditingItem(item);
    setNewItem({
      name: item.name,
      price: item.price.toString(),
      category: item.category
    });
    setShowAddItem(true);
  };

  const handleUpdateItem = () => {
    if (!newItem.name || !newItem.price || !newItem.category) {
      alert('Please fill in all fields');
      return;
    }
    
    // Update item in local menu data immediately
    setLocalMenuData(prev => ({
      ...prev,
      [editingItem.category]: prev[editingItem.category].map(item => 
        item.id === editingItem.id 
          ? { ...item, name: newItem.name, price: Number(newItem.price), category: newItem.category }
          : item
      )
    }));
    
    // Show temporary success message
    setSuccessMessage(`"${newItem.name}" updated in menu`);
    setTimeout(() => setSuccessMessage(''), 3000);
    
    // Reset form
    setNewItem({ name: '', price: '', category: 'breakfast' });
    setEditingItem(null);
    setShowAddItem(false);
  };

  const handleDeleteItem = (item) => {
    if (window.confirm(`Are you sure you want to delete "${item.name}"?`)) {
      // Remove item from local menu data immediately
      setLocalMenuData(prev => ({
        ...prev,
        [item.category]: prev[item.category].filter(menuItem => menuItem.id !== item.id)
      }));
      
      // Show temporary success message
      setSuccessMessage(`"${item.name}" removed from menu`);
      setTimeout(() => setSuccessMessage(''), 3000);
    }
  };

  const renderMenuSection = (title, items, category) => (
    <div key={category} className="mb-8">
      <h3 className="menu-category">{title}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {items.map((item) => (
          <div key={item.id} className="card p-4 hover:shadow-md transition-shadow">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h4 className="font-semibold text-gray-800">{item.name}</h4>
                <p className="text-lg font-bold text-primary-600">₹{item.price}</p>
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => addToCart(item)}
                  className="bg-primary-600 text-white p-2 rounded-full hover:bg-primary-700 transition-colors"
                  title="Add to cart"
                >
                  <Plus className="w-4 h-4" />
                </button>
                {activeTab === 'menu' && (
                  <>
                    <button
                      onClick={() => handleEditItem(item)}
                      className="bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 transition-colors"
                      title="Edit item"
                    >
                      <Edit3 className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => handleDeleteItem(item)}
                      className="bg-red-600 text-white p-2 rounded-full hover:bg-red-700 transition-colors"
                      title="Delete item"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderBillingTab = () => (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Menu Section */}
      <div className="lg:col-span-2">
        <div className="card p-6">
          <h2 className="text-xl font-bold text-gray-800 mb-6">Menu Items</h2>
          
          {renderMenuSection('Breakfast / Tiffin', localMenuData.breakfast || [], 'breakfast')}
          {renderMenuSection('Lunch / Meals (Veg)', localMenuData.lunchVeg || [], 'lunchVeg')}
          {renderMenuSection('Lunch / Dinner (Non-Veg)', localMenuData.lunchNonVeg || [], 'lunchNonVeg')}
          {renderMenuSection('Snacks', localMenuData.snacks || [], 'snacks')}
          {renderMenuSection('Beverages', localMenuData.beverages || [], 'beverages')}
        </div>
      </div>

      {/* Cart Section */}
      <div className="lg:col-span-1">
        <div className="card p-6 sticky top-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-gray-800 flex items-center">
              <ShoppingCart className="w-5 h-5 mr-2" />
              Order Summary
            </h2>
          </div>

          {/* Table Selection */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
              <Table className="w-4 h-4 mr-2" />
              Select Table Number
            </label>
            <select
              value={selectedTable}
              onChange={(e) => setSelectedTable(Number(e.target.value))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 bg-white"
            >
              {tableNumbers.map(tableNo => (
                <option key={tableNo} value={tableNo}>
                  Table {tableNo}
                </option>
              ))}
            </select>
            <p className="text-xs text-gray-500 mt-1">
              Currently serving: <span className="font-medium text-primary-600">Table {selectedTable}</span>
            </p>
          </div>

          {/* Cart Items */}
          <div className="space-y-3 mb-6 max-h-96 overflow-y-auto">
            {state.cart.length === 0 ? (
              <p className="text-gray-500 text-center py-8">No items in cart</p>
            ) : (
              state.cart.map((item) => (
                <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-800">{item.name}</h4>
                    <p className="text-sm text-gray-600">₹{item.price} × {item.quantity}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => updateQuantity(item.id, item.quantity - 1)}
                      className="w-8 h-8 bg-gray-200 text-gray-700 rounded-full flex items-center justify-center hover:bg-gray-300"
                    >
                      <Minus className="w-4 h-4" />
                    </button>
                    <span className="w-8 text-center font-medium">{item.quantity}</span>
                    <button
                      onClick={() => updateQuantity(item.id, item.quantity + 1)}
                      className="w-8 h-8 bg-primary-600 text-white rounded-full flex items-center justify-center hover:bg-primary-700"
                    >
                      <Plus className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => removeFromCart(item.id)}
                      className="w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center hover:bg-red-200"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* Cart Total */}
          {state.cart.length > 0 && (
            <div className="border-t border-gray-200 pt-4 mb-6">
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-600">Subtotal:</span>
                  <span className="font-medium">₹{calculateSubtotal()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">GST ({gstRate}%):</span>
                  <span className="font-medium">₹{calculateGST().toFixed(2)}</span>
                </div>
                <div className="flex justify-between text-lg font-bold">
                  <span>Total:</span>
                  <span className="text-primary-600">₹{calculateTotal().toFixed(2)}</span>
                </div>
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="space-y-3">
            <button
              onClick={generateBill}
              disabled={state.cart.length === 0}
              className="w-full btn-primary py-3 text-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Receipt className="w-5 h-5 mr-2 inline" />
              Generate Bill for Table {selectedTable}
            </button>
            {state.cart.length > 0 && (
              <button
                onClick={() => actions.clearCart()}
                className="w-full btn-secondary py-2"
              >
                Clear Cart
              </button>
            )}
          </div>

          {/* PDF Download Button - Always Available */}
          <div className="mt-4 pt-4 border-t border-gray-200">
            <button
              onClick={generatePDF}
              disabled={isGeneratingPDF || state.cart.length === 0}
              className="w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium flex items-center justify-center transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGeneratingPDF ? (
                <>
                  <FileText className="w-4 h-4 mr-2 animate-pulse" />
                  Generating PDF...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Download PDF Bill
                </>
              )}
            </button>
            <p className="text-xs text-gray-500 text-center mt-2">
              Professional PDF bill for client records
            </p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderMenuManagementTab = () => (
    <div className="space-y-6">
      {/* Success Message */}
      {successMessage && (
        <div className="card p-4 bg-green-50 border border-green-200">
          <div className="flex items-center space-x-2 text-green-700">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="font-medium">{successMessage}</span>
          </div>
        </div>
      )}

      {/* GST Settings */}
      <div className="card p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-gray-800 flex items-center">
            <Settings className="w-5 h-5 mr-2" />
            GST Settings
          </h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              GST Rate (%)
            </label>
            <input
              type="number"
              min="0"
              max="100"
              step="0.1"
              value={gstRate}
              onChange={(e) => setGstRate(Number(e.target.value))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="5.0"
            />
            <p className="text-xs text-gray-500 mt-1">
              Current GST rate: {gstRate}% (This will apply to all bills)
            </p>
          </div>
          <div className="flex items-end">
            <button
              onClick={() => {
                setSuccessMessage(`GST rate updated to ${gstRate}%`);
                setTimeout(() => setSuccessMessage(''), 3000);
              }}
              className="btn-primary px-6 py-3"
            >
              Update GST Rate
            </button>
          </div>
        </div>
      </div>

      {/* Add New Item */}
      <div className="card p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-gray-800 flex items-center">
            <Plus className="w-5 h-5 mr-2" />
            {editingItem ? 'Edit Menu Item' : 'Add New Menu Item'}
          </h2>
          {!showAddItem && (
            <button
              onClick={() => setShowAddItem(true)}
              className="btn-primary px-4 py-2"
            >
              Add New Item
            </button>
          )}
        </div>

        {showAddItem && (
          <div className="bg-gray-50 p-6 rounded-lg">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Item Name
                </label>
                <input
                  type="text"
                  value={newItem.name}
                  onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  placeholder="e.g., Butter Chicken"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Price (₹)
                </label>
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={newItem.price}
                  onChange={(e) => setNewItem({ ...newItem, price: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  placeholder="180.00"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Category
                </label>
                <select
                  value={newItem.category}
                  onChange={(e) => setNewItem({ ...newItem, category: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 bg-white"
                >
                  {categories.map(cat => (
                    <option key={cat.value} value={cat.value}>
                      {cat.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={editingItem ? handleUpdateItem : handleAddItem}
                className="btn-primary px-6 py-2"
              >
                {editingItem ? 'Update Item' : 'Add Item'}
              </button>
              <button
                onClick={() => {
                  setShowAddItem(false);
                  setEditingItem(null);
                  setNewItem({ name: '', price: '', category: 'breakfast' });
                }}
                className="btn-secondary px-6 py-2"
              >
                Cancel
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Current Menu Items */}
      <div className="card p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-6">Current Menu Items</h2>
        <p className="text-gray-600 mb-4">
          Click the edit or delete buttons on menu items to manage them. 
          (This is a demo - in production, changes would be saved to database)
        </p>
        
        {renderMenuSection('Breakfast / Tiffin', localMenuData.breakfast || [], 'breakfast')}
        {renderMenuSection('Lunch / Meals (Veg)', localMenuData.lunchVeg || [], 'lunchVeg')}
        {renderMenuSection('Lunch / Dinner (Non-Veg)', localMenuData.lunchNonVeg || [], 'lunchNonVeg')}
        {renderMenuSection('Snacks', localMenuData.snacks || [], 'snacks')}
        {renderMenuSection('Beverages', localMenuData.beverages || [], 'beverages')}
      </div>
    </div>
  );

  return (
    <div 
      className="w-full h-full relative"
      style={{
        backgroundImage: `url('/Billing and Menu.png')`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed',
        minHeight: '100vh',
        width: '100%'
      }}
    >
      {/* Content */}
      <div className="relative z-10 p-4 lg:p-6">
        {/* Header */}
        <div className="mb-4 lg:mb-6">
          <h1 className="text-3xl lg:text-4xl font-bold text-white mb-2 drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8), -0.5px -0.5px 1px rgba(0,0,0,0.8), 0.5px -0.5px 1px rgba(0,0,0,0.8), -0.5px 0.5px 1px rgba(0,0,0,0.8)' }}>
            Billing & Menu Management
          </h1>
          <p className="text-lg lg:text-xl text-white font-medium drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8), -0.5px -0.5px 1px rgba(0,0,0,0.8), 0.5px -0.5px 1px rgba(0,0,0,0.8), -0.5px 0.5px 1px rgba(0,0,0,0.8)' }}>
            Create orders, generate bills, and manage your menu
          </p>
        </div>

      {/* Tab Navigation */}
      <div className="mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('billing')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'billing'
                  ? 'border-primary-500 text-primary-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <Receipt className="w-4 h-4 inline mr-2" />
              Billing & Orders
            </button>
            <button
              onClick={() => setActiveTab('menu')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'menu'
                  ? 'border-primary-500 text-primary-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <MenuIcon className="w-4 h-4 inline mr-2" />
              Menu Management
            </button>
          </nav>
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === 'billing' ? renderBillingTab() : renderMenuManagementTab()}

      {/* Receipt Modal */}
      {showReceipt && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold text-gray-800">Bill Preview</h3>
                <button
                  onClick={() => setShowReceipt(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>

              {/* Thermal Receipt Style */}
              <div className="receipt">
                <div className="text-center mb-4">
                  <h4 className="font-bold text-lg">RESTAURANT POS</h4>
                  <p className="text-sm text-gray-600">Professional System</p>
                  <p className="text-xs text-gray-500">{new Date().toLocaleDateString()}</p>
                  <p className="text-xs text-gray-500">{new Date().toLocaleTimeString()}</p>
                  <p className="text-xs text-gray-500">Table {selectedTable}</p>
                </div>

                <div className="border-t border-gray-300 pt-2 mb-4">
                  {state.cart.map((item) => (
                    <div key={item.id} className="flex justify-between text-sm mb-1">
                      <span>{item.name} × {item.quantity}</span>
                      <span>₹{item.price * item.quantity}</span>
                    </div>
                  ))}
                </div>

                <div className="border-t border-gray-300 pt-2 space-y-1">
                  <div className="flex justify-between text-sm">
                    <span>Subtotal:</span>
                    <span>₹{calculateSubtotal()}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>GST ({gstRate}%):</span>
                    <span>₹{calculateGST().toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between font-bold border-t border-gray-300 pt-2">
                    <span>TOTAL:</span>
                    <span>₹{calculateTotal().toFixed(2)}</span>
                  </div>
                </div>

                <div className="text-center mt-4 text-xs text-gray-500">
                  <p>Thank you for dining with us!</p>
                  <p>Please visit again</p>
                </div>
              </div>

              <div className="mt-6 flex space-x-3">
                <button
                  onClick={() => setShowReceipt(false)}
                  className="flex-1 btn-secondary"
                >
                  Cancel
                </button>
                <button
                  onClick={printReceipt}
                  disabled={isPrinting}
                  className="flex-1 btn-primary flex items-center justify-center"
                >
                  {isPrinting ? (
                    <>
                      <Printer className="w-4 h-4 mr-2 animate-pulse" />
                      Printing...
                    </>
                  ) : (
                    <>
                      <Printer className="w-4 h-4 mr-2" />
                      Print & Generate Bill
                    </>
                  )}
                </button>
              </div>

              {/* PDF Download Button in Receipt Modal */}
              <div className="mt-4">
                <button
                  onClick={generatePDF}
                  disabled={isGeneratingPDF}
                  className="w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium flex items-center justify-center transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isGeneratingPDF ? (
                    <>
                      <FileText className="w-4 h-4 mr-2 animate-pulse" />
                      Generating PDF...
                    </>
                  ) : (
                    <>
                      <Download className="w-4 h-4 mr-2" />
                      Download PDF Bill
                    </>
                  )}
                </button>
                <p className="text-xs text-gray-500 text-center mt-2">
                  Professional PDF bill for client records
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Printing Message */}
      {isPrinting && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Printer className="w-8 h-8 text-blue-600 animate-pulse" />
            </div>
            <h3 className="text-xl font-bold text-gray-800 mb-2">
              Printing to Thermal Printer...
            </h3>
            <p className="text-gray-600">Please wait while we process your order for Table {selectedTable}</p>
          </div>
        </div>
      )}
      </div>
    </div>
  );
};

export default BillingModule;
